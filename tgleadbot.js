require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

const steps = JSON.parse(fs.readFileSync('./steps.json', 'utf8'));
let userData = fs.existsSync('./userData.json') ? JSON.parse(fs.readFileSync('./userData.json', 'utf8')) : {};

function saveUserData() {
  fs.writeFileSync('./userData.json', JSON.stringify(userData, null, 2));
}

// === ‚¨áÔ∏è –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ —à–∞–≥–æ–≤ ===
function sendStep(chatId, stepIndex) {
  const step = steps[stepIndex];
  if (!step) {
    bot.sendMessage(chatId, "üéâ –¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ —à–∞–≥–∏! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –±—ã–ª —Å –Ω–∞–º–∏.");
    return;
  }

  userData[chatId] = stepIndex;
  saveUserData();

  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ (–æ–¥–Ω–∞ –∏–ª–∏ –º–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫)
  const inline_keyboard = (step.buttons || []).map(row =>
    row.map(btn => ({ text: btn.text, callback_data: btn.data }))
  );

  const options = {
    reply_markup: {
      inline_keyboard: inline_keyboard.length ? inline_keyboard : [[{ text: step.button || "–î–∞–ª—å—à–µ", callback_data: "next" }]]
    }
  };

  switch (step.type) {
    case 'text':
      bot.sendMessage(chatId, step.content, options);
      break;
    case 'document':
      bot.sendDocument(chatId, step.file, {
        caption: step.caption,
        ...options
      });
      break;
    case 'video':
      bot.sendVideo(chatId, step.file, {
        caption: step.caption,
        ...options
      });
      break;
    case 'audio':
      bot.sendAudio(chatId, step.file, {
        caption: step.caption,
        ...options
      });
      break;
    default:
      bot.sendMessage(chatId, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —à–∞–≥–∞.");
  }
}

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  sendStep(chatId, 0);
});

// === ‚¨áÔ∏è –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ –∫–Ω–æ–ø–∫–∞–º ===
bot.on('callback_query', (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  const current = userData[chatId] || 0;

  if (data === 'next') {
    sendStep(chatId, current + 1);
  } else if (data.startsWith('goto:')) {
    const index = parseInt(data.split(':')[1], 10);
    if (!isNaN(index)) sendStep(chatId, index);
  } else {
    bot.sendMessage(chatId, `‚è≥ –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞: ${data}`);
  }

  bot.answerCallbackQuery(query.id).catch(() => {});
});

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2
const MY_ID = 1296951270;

bot.on('channel_post', (msg) => {
  console.log('üì° –ü–æ–ª—É—á–µ–Ω –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞:', msg);

  const chatId = MY_ID;

  if (msg.video) {
    bot.sendMessage(chatId, `üé• –í–∏–¥–µ–æ file_id:\n${msg.video.file_id}`);
  } else if (msg.document) {
    bot.sendMessage(chatId, `üìÑ –î–æ–∫—É–º–µ–Ω—Ç file_id:\n${msg.document.file_id}`);
  } else if (msg.audio) {
    bot.sendMessage(chatId, `üéµ –ê—É–¥–∏–æ file_id:\n${msg.audio.file_id}`);
  } else if (msg.voice) {
    bot.sendMessage(chatId, `üéô –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ file_id:\n${msg.voice.file_id}`);
  } else if (msg.photo) {
    const largestPhoto = msg.photo[msg.photo.length - 1]; // –±–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ
    bot.sendMessage(chatId, `üñº –§–æ—Ç–æ file_id:\n${largestPhoto.file_id}`);
  } else {
    bot.sendMessage(chatId, 'ü§∑ –ö–∞–Ω–∞–ª –ø–æ–ª—É—á–∏–ª —á—Ç–æ-—Ç–æ, —á—Ç–æ –±–æ—Ç –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—Å—Ç –∏–ª–∏ unsupported —Ñ–æ—Ä–º–∞—Ç).');
  }
});
